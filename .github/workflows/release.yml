name: "Release"

on:
  release:
    types:
      - published

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3.1.30, 5.0.17, 6.0.10]
    steps:
      - uses: actions/checkout@v3
      - name: Prepare
        id: prep
        shell: bash
        run: |
          curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          chmod +x jq
          DOCKER_IMAGE=ghcr.io/sitkoru/dotnet-runtime
          VERSION=${{ matrix.version }}
          echo VERSION=${VERSION}
          MAJOR=`echo $VERSION | cut -d. -f1`
          echo MAJOR=${MAJOR}
          MINOR=`echo $VERSION | cut -d. -f2`
          echo MINOR=${MINOR}
          REF=${GITHUB_REF#refs/tags/}
          if [[ $REF =~ ^v.*$ ]]; then
            TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${MAJOR}.${MINOR},${DOCKER_IMAGE}:${MAJOR}"
            TAGS_CHROME_DEPS="${DOCKER_IMAGE}:${VERSION}-chrome-deps,${DOCKER_IMAGE}:${MAJOR}.${MINOR}-chrome-deps,${DOCKER_IMAGE}:${MAJOR}-chrome-deps"
            TAGS_NEWRELIC="${DOCKER_IMAGE}:${VERSION}-newrelic,${DOCKER_IMAGE}:${MAJOR}.${MINOR}-newrelic,${DOCKER_IMAGE}:${MAJOR}-newrelic"
            TAGS_CHROME_DEPS_NEWRELIC="${DOCKER_IMAGE}:${VERSION}-chrome-deps-newrelic,${DOCKER_IMAGE}:${MAJOR}.${MINOR}-chrome-deps-newrelic,${DOCKER_IMAGE}:${MAJOR}-chrome-deps-newrelic"
          else
            TAGS="${DOCKER_IMAGE}:${VERSION}-${{ github.run_id }}"
            TAGS_CHROME_DEPS="${DOCKER_IMAGE}:${VERSION}-chrome-deps-${{ github.run_id }}"
            TAGS_NEWRELIC="${DOCKER_IMAGE}:${VERSION}-newrelic-${{ github.run_id }}"
            TAGS_CHROME_DEPS_NEWRELIC="${DOCKER_IMAGE}:${VERSION}-chrome-deps-newrelic-${{ github.run_id }}"
          fi
          DOTNET_RELEASE_URL=https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/${MAJOR}.${MINOR}/releases.json
          echo DOTNET_RELEASE_URL=${DOTNET_RELEASE_URL}
          curl -L -o releases.json ${DOTNET_RELEASE_URL}
          RUNTIME_VERSION=$(cat releases.json | ./jq -r ".releases[] | select(.\"release-version\"==\"${VERSION}\").runtime.\"version-display\"")
          echo RUNTIME_VERSION=${RUNTIME_VERSION}
          SDK_VERSION=${MAJOR}.${MINOR}
          echo SDK_VERSION=${SDK_VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=tags_chrome_deps::${TAGS_CHROME_DEPS}
          echo ::set-output name=tags_newrelic::${TAGS_NEWRELIC}
          echo ::set-output name=tags_chrome_deps_newrelic::${TAGS_CHROME_DEPS_NEWRELIC}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=runtime_version::${RUNTIME_VERSION}
          echo ::set-output name=sdk_version::${SDK_VERSION}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.BOT_NAME }}
          password: ${{ secrets.BOT_TOKEN }}
      - name: Base
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: ./Dockerfile
          target: base
          build-args: |
            RUNTIME_VERSION=${{ steps.prep.outputs.runtime_version }}
            SDK_VERSION=${{ steps.prep.outputs.sdk_version }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
      - name: Chrome deps
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: ./Dockerfile
          target: chrome-deps
          build-args: |
            RUNTIME_VERSION=${{ steps.prep.outputs.runtime_version }}
            SDK_VERSION=${{ steps.prep.outputs.sdk_version }}
          tags: ${{ steps.prep.outputs.tags_chrome_deps }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
      - name: Newrelic
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: ./Dockerfile
          target: newrelic
          build-args: |
            RUNTIME_VERSION=${{ steps.prep.outputs.runtime_version }}
            SDK_VERSION=${{ steps.prep.outputs.sdk_version }}
          tags: ${{ steps.prep.outputs.tags_newrelic }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
      - name: Chrome-Newrelic
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: ./Dockerfile
          target: chrome-deps-newrelic
          build-args: |
            RUNTIME_VERSION=${{ steps.prep.outputs.runtime_version }}
            SDK_VERSION=${{ steps.prep.outputs.sdk_version }}
          tags: ${{ steps.prep.outputs.tags_chrome_deps_newrelic }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
